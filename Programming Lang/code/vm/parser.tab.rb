#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.5
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Parser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
     7,     8,     1,     6,     5,     9,     5,     5 ]

racc_action_check = [
     4,     4,     0,     2,     1,     6,     7,     8 ]

racc_action_pointer = [
    -4,    -3,     3,   nil,    -4,   nil,     5,    -1,     0,   nil,
   nil,   nil ]

racc_action_default = [
    -2,    -7,    -7,    -1,    -3,    -6,    -7,    -7,    -7,    12,
    -4,    -5 ]

racc_goto_table = [
     4,     3,     2,   nil,   nil,   nil,    10,    11 ]

racc_goto_check = [
     3,     2,     1,   nil,   nil,   nil,     3,     3 ]

racc_goto_pointer = [
   nil,     2,     1,    -1 ]

racc_goto_default = [
   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 9, :_reduce_none,
  0, 9, :_reduce_2,
  2, 10, :_reduce_3,
  3, 11, :_reduce_4,
  3, 11, :_reduce_5,
  1, 11, :_reduce_none ]

racc_reduce_n = 7

racc_shift_n = 12

racc_token_table = {
  false => 0,
  :error => 1,
  "*" => 2,
  "/" => 3,
  "+" => 4,
  "-" => 5,
  :PRINT => 6,
  :NUMBER => 7 }

racc_nt_base = 8

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "PRINT",
  "NUMBER",
  "$start",
  "target",
  "stmt",
  "exp" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.y', 8)
  def _reduce_2(val, _values)
     0 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 10)
  def _reduce_3(val, _values)
     Node.new(:PRINT, [val[1]]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 12)
  def _reduce_4(val, _values)
     Node.new(:ADD, [val[0], val[2]]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 13)
  def _reduce_5(val, _values)
     Node.new(:SUB, [val[0], val[2]]) 
  end
.,.,

# reduce 6 omitted

def _reduce_none(val, _values)
  val[0]
end

end   # class Parser
